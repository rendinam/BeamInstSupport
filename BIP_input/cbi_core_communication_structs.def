!!instrument_type:ALL
!!platform:ALL
!!include_dirs:
!!  ../BeamInstSupport/include


$$
typedef struct {
      int cmd;
      int cmd_status;
      int error[CBI_MAX_ERROR_WORDS];
      int handshake;
} CMD;


$$ protection:read
typedef struct {
      int state;
      int status;
      int num_levels;
      int trace[CBI_MAX_TRACE_LEVELS];
} STAT;


$$
typedef struct {
      int write_ptr;
      int debug[CBI_MAX_DEBUG_WORDS];
      int routine[CBI_MAX_DEBUG_WORDS];
      int padding;
} DEBUG;


//-----------------------------------------------------------------------+
// IDENT   - Strucuture to hold TigerSHARC BPM-specific                  |
//           instrument-managed BPM identification and addressing        |
//           information.                                                |
//           This is the platform-specific counterpart to the more       |
//           more general global structure called CBI_IDENT  common to   |
//           all CBI instruments.                                        |
//                                                                       |
//                                                                       |
// ipaddr     : IP address of the BPM                                    |
//              TODO: Accomodate proper string.                          |
//                                                                       |
// hostname   : Hostname of the BPM  (Serves as a unique global          |
//              identifier for the instrument.)                          |
//              TODO: accomodate proper string.                          |
//                                                                       |
// module_type:                                                          |
//                                                                       |
// fpga_maj   : Major version number of digital board FPGA firmware.     |
//                                                                       |
// fpga_min   : Minor version number of digital board FPGA firmware.     |
//                                                                       |
// fpga_id    : FPGA firmware version numbers for each front-end board.  |
//-----------------------------------------------------------------------+
$$ protection:read
typedef struct {
      char ipaddr[16];
      char hostname[28];
      int module_type;
      int fpga_maj;
      int fpga_min;
      int fe_fpga_id[4];
} IDENT;


//-----------------------------------------------------------------------+
// HEARTBEAT  -   Holds DSP activity and timing integrity status values  |
//                                                                       |
//                                                                       |
// DSP_heartbeat    : Holds a wrapping counter that will always be       |
//                    incrementing if the DSP's software is operating    |
//                    correctly.                                         |
//                                                                       |
// timing_integrity : A bit pattern that shows the status of the timing  |
//                    signal over the last X seconds.  Each bit          |
//                    to a one-second assessment interval.  High bits    |
//                    indicate that the number of turns markers seen by  |
//                    the instrument in the corresponding one second     |
//                    interval was within the thresholds for adequate    |
//                    timing signal availability.                        |
//                    This word is only accurate if the DSP_heartbeat    |
//                    above is also incrementing.                        |
//                                                                       |
// turns_seen       : Number of turns markers seen in the sampling period|
//-----------------------------------------------------------------------+
$$ protection:read
typedef struct {
      int heartbeat;
      int timing_integrity;
      int turns_seen;
} HEARTBEAT;


//-----------------------------------------------------------------------+
// MODULE_CONFIG - Holds read-only information types that are common to  |
//                 ALL instrumentation units that use BeamInstSupport.   |
//                 Certain values are meant to be encoded in the DSP     |
//                 executable at COMPILE TIME and define characteristics |
//                 of a given build, while the rest define               |
//                 hardware-specific values that get polled and          |
//                 published during DSP initialization.                  |
//                                                                       |
// Control System PROTECTION - READ_ONLY                                 |
//                                                                       |
// code_version     : version number of the code library used to build   |
//                    the currently running DSP executable               |
// ana_card_id      : analog card ID                                     |
// tim_card_id      : timing card ID                                     |
// dig_card_id      : digital card ID                                    |
// exe_type         : executable type running in DSP (NOTE:  multiple    |
//                    executables are available for download to the DSPs |
//                    depending on what measurements are needed          |
// exe_version      : version number associated with the specific exe    |
//                    being run in the DSP                               |
//-----------------------------------------------------------------------+
$$ protection:read
typedef struct {
      int   exe_type;
      float exe_version;
      char   ldr_name[44];
      int   build_timestamp;
      int   core_comm_struct_rev;
      int   platform_comm_struct_rev;
      int   compiler_ver;
      float lib_version;    // was code_version. Version of LIBRARY used to build DSP code?
      int   hardware_ver;
      int   firmware_ver;  // For central FPGA (Charlie's)
} MODULE_CONFIG;
